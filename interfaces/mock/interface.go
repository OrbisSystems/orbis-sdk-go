// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"
	time "time"

	model "github.com/OrbisSystems/orbis-sdk-go/model"
	gomock "github.com/golang/mock/gomock"
	redis "github.com/redis/go-redis/v9"
)

// MockRedisRepo is a mock of RedisRepo interface.
type MockRedisRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRedisRepoMockRecorder
}

// MockRedisRepoMockRecorder is the mock recorder for MockRedisRepo.
type MockRedisRepoMockRecorder struct {
	mock *MockRedisRepo
}

// NewMockRedisRepo creates a new mock instance.
func NewMockRedisRepo(ctrl *gomock.Controller) *MockRedisRepo {
	mock := &MockRedisRepo{ctrl: ctrl}
	mock.recorder = &MockRedisRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisRepo) EXPECT() *MockRedisRepoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRedisRepo) Get(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockRedisRepoMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisRepo)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockRedisRepo) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRedisRepoMockRecorder) Set(ctx, key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisRepo)(nil).Set), ctx, key, value, expiration)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockStorage) Get(ctx context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage)(nil).Get), ctx)
}

// Store mocks base method.
func (m *MockStorage) Store(ctx context.Context, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockStorageMockRecorder) Store(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockStorage)(nil).Store), ctx, data)
}

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockHTTPClient) Get(ctx context.Context, url string, headers http.Header) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, url, headers)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHTTPClientMockRecorder) Get(ctx, url, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHTTPClient)(nil).Get), ctx, url, headers)
}

// Post mocks base method.
func (m *MockHTTPClient) Post(ctx context.Context, url string, body io.Reader, headers http.Header) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, url, body, headers)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockHTTPClientMockRecorder) Post(ctx, url, body, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHTTPClient)(nil).Post), ctx, url, body, headers)
}

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// GetToken mocks base method.
func (m *MockAuth) GetToken(ctx context.Context) (model.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", ctx)
	ret0, _ := ret[0].(model.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockAuthMockRecorder) GetToken(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockAuth)(nil).GetToken), ctx)
}

// GetTokenRefreshingState mocks base method.
func (m *MockAuth) GetTokenRefreshingState() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenRefreshingState")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetTokenRefreshingState indicates an expected call of GetTokenRefreshingState.
func (mr *MockAuthMockRecorder) GetTokenRefreshingState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenRefreshingState", reflect.TypeOf((*MockAuth)(nil).GetTokenRefreshingState))
}

// SetToken mocks base method.
func (m *MockAuth) SetToken(ctx context.Context, token model.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetToken indicates an expected call of SetToken.
func (mr *MockAuthMockRecorder) SetToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToken", reflect.TypeOf((*MockAuth)(nil).SetToken), ctx, token)
}

// SetTokenRefreshingState mocks base method.
func (m *MockAuth) SetTokenRefreshingState(state bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTokenRefreshingState", state)
}

// SetTokenRefreshingState indicates an expected call of SetTokenRefreshingState.
func (mr *MockAuthMockRecorder) SetTokenRefreshingState(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTokenRefreshingState", reflect.TypeOf((*MockAuth)(nil).SetTokenRefreshingState), state)
}

// MockAccountService is a mock of AccountService interface.
type MockAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceMockRecorder
}

// MockAccountServiceMockRecorder is the mock recorder for MockAccountService.
type MockAccountServiceMockRecorder struct {
	mock *MockAccountService
}

// NewMockAccountService creates a new mock instance.
func NewMockAccountService(ctrl *gomock.Controller) *MockAccountService {
	mock := &MockAccountService{ctrl: ctrl}
	mock.recorder = &MockAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountService) EXPECT() *MockAccountServiceMockRecorder {
	return m.recorder
}

// CreateAPIKey mocks base method.
func (m *MockAccountService) CreateAPIKey(ctx context.Context, req model.CreateAPIKeyRequest) (model.CreateAPIKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAPIKey", ctx, req)
	ret0, _ := ret[0].(model.CreateAPIKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAPIKey indicates an expected call of CreateAPIKey.
func (mr *MockAccountServiceMockRecorder) CreateAPIKey(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPIKey", reflect.TypeOf((*MockAccountService)(nil).CreateAPIKey), ctx, req)
}

// GetUserByID mocks base method.
func (m *MockAccountService) GetUserByID(ctx context.Context, id int) (model.GetB2BUserByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(model.GetB2BUserByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAccountServiceMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAccountService)(nil).GetUserByID), ctx, id)
}

// LoginByAPIKey mocks base method.
func (m *MockAccountService) LoginByAPIKey(ctx context.Context, req model.LoginByAPIKeyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginByAPIKey", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoginByAPIKey indicates an expected call of LoginByAPIKey.
func (mr *MockAccountServiceMockRecorder) LoginByAPIKey(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginByAPIKey", reflect.TypeOf((*MockAccountService)(nil).LoginByAPIKey), ctx, req)
}

// LoginByEmail mocks base method.
func (m *MockAccountService) LoginByEmail(ctx context.Context, req model.LoginByEmailRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginByEmail", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoginByEmail indicates an expected call of LoginByEmail.
func (mr *MockAccountServiceMockRecorder) LoginByEmail(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginByEmail", reflect.TypeOf((*MockAccountService)(nil).LoginByEmail), ctx, req)
}

// RefreshToken mocks base method.
func (m *MockAccountService) RefreshToken(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockAccountServiceMockRecorder) RefreshToken(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockAccountService)(nil).RefreshToken), ctx)
}

// MockNewsService is a mock of NewsService interface.
type MockNewsService struct {
	ctrl     *gomock.Controller
	recorder *MockNewsServiceMockRecorder
}

// MockNewsServiceMockRecorder is the mock recorder for MockNewsService.
type MockNewsServiceMockRecorder struct {
	mock *MockNewsService
}

// NewMockNewsService creates a new mock instance.
func NewMockNewsService(ctrl *gomock.Controller) *MockNewsService {
	mock := &MockNewsService{ctrl: ctrl}
	mock.recorder = &MockNewsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsService) EXPECT() *MockNewsServiceMockRecorder {
	return m.recorder
}

// GetAvailableAuthors mocks base method.
func (m *MockNewsService) GetAvailableAuthors(ctx context.Context, symbol *string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableAuthors", ctx, symbol)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableAuthors indicates an expected call of GetAvailableAuthors.
func (mr *MockNewsServiceMockRecorder) GetAvailableAuthors(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableAuthors", reflect.TypeOf((*MockNewsService)(nil).GetAvailableAuthors), ctx, symbol)
}

// GetAvailableChannels mocks base method.
func (m *MockNewsService) GetAvailableChannels(ctx context.Context, symbol *string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableChannels", ctx, symbol)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableChannels indicates an expected call of GetAvailableChannels.
func (mr *MockNewsServiceMockRecorder) GetAvailableChannels(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableChannels", reflect.TypeOf((*MockNewsService)(nil).GetAvailableChannels), ctx, symbol)
}

// GetAvailableSymbols mocks base method.
func (m *MockNewsService) GetAvailableSymbols(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableSymbols", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableSymbols indicates an expected call of GetAvailableSymbols.
func (mr *MockNewsServiceMockRecorder) GetAvailableSymbols(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableSymbols", reflect.TypeOf((*MockNewsService)(nil).GetAvailableSymbols), ctx)
}

// GetAvailableTags mocks base method.
func (m *MockNewsService) GetAvailableTags(ctx context.Context, symbol *string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableTags", ctx, symbol)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableTags indicates an expected call of GetAvailableTags.
func (mr *MockNewsServiceMockRecorder) GetAvailableTags(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableTags", reflect.TypeOf((*MockNewsService)(nil).GetAvailableTags), ctx, symbol)
}

// GetByFilter mocks base method.
func (m *MockNewsService) GetByFilter(ctx context.Context, req model.NewsFilterRequest) (model.NewsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFilter", ctx, req)
	ret0, _ := ret[0].(model.NewsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFilter indicates an expected call of GetByFilter.
func (mr *MockNewsServiceMockRecorder) GetByFilter(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFilter", reflect.TypeOf((*MockNewsService)(nil).GetByFilter), ctx, req)
}

// GetByID mocks base method.
func (m *MockNewsService) GetByID(ctx context.Context, req model.NewsRequest) (model.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, req)
	ret0, _ := ret[0].(model.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockNewsServiceMockRecorder) GetByID(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockNewsService)(nil).GetByID), ctx, req)
}

// MockLogosService is a mock of LogosService interface.
type MockLogosService struct {
	ctrl     *gomock.Controller
	recorder *MockLogosServiceMockRecorder
}

// MockLogosServiceMockRecorder is the mock recorder for MockLogosService.
type MockLogosServiceMockRecorder struct {
	mock *MockLogosService
}

// NewMockLogosService creates a new mock instance.
func NewMockLogosService(ctrl *gomock.Controller) *MockLogosService {
	mock := &MockLogosService{ctrl: ctrl}
	mock.recorder = &MockLogosServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogosService) EXPECT() *MockLogosServiceMockRecorder {
	return m.recorder
}

// ConvertedCryptoSymbolLogo mocks base method.
func (m *MockLogosService) ConvertedCryptoSymbolLogo(ctx context.Context, req model.SymbolLogoConvertedRequest) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertedCryptoSymbolLogo", ctx, req)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertedCryptoSymbolLogo indicates an expected call of ConvertedCryptoSymbolLogo.
func (mr *MockLogosServiceMockRecorder) ConvertedCryptoSymbolLogo(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertedCryptoSymbolLogo", reflect.TypeOf((*MockLogosService)(nil).ConvertedCryptoSymbolLogo), ctx, req)
}

// ConvertedSymbolLogo mocks base method.
func (m *MockLogosService) ConvertedSymbolLogo(ctx context.Context, req model.SymbolLogoConvertedRequest) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertedSymbolLogo", ctx, req)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertedSymbolLogo indicates an expected call of ConvertedSymbolLogo.
func (mr *MockLogosServiceMockRecorder) ConvertedSymbolLogo(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertedSymbolLogo", reflect.TypeOf((*MockLogosService)(nil).ConvertedSymbolLogo), ctx, req)
}

// CryptoSymbolLogo mocks base method.
func (m *MockLogosService) CryptoSymbolLogo(ctx context.Context, symbol string) (model.SymbolLogosResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CryptoSymbolLogo", ctx, symbol)
	ret0, _ := ret[0].(model.SymbolLogosResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoSymbolLogo indicates an expected call of CryptoSymbolLogo.
func (mr *MockLogosServiceMockRecorder) CryptoSymbolLogo(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoSymbolLogo", reflect.TypeOf((*MockLogosService)(nil).CryptoSymbolLogo), ctx, symbol)
}

// DirectCryptoSymbolLogo mocks base method.
func (m *MockLogosService) DirectCryptoSymbolLogo(ctx context.Context, symbol string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DirectCryptoSymbolLogo", ctx, symbol)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DirectCryptoSymbolLogo indicates an expected call of DirectCryptoSymbolLogo.
func (mr *MockLogosServiceMockRecorder) DirectCryptoSymbolLogo(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirectCryptoSymbolLogo", reflect.TypeOf((*MockLogosService)(nil).DirectCryptoSymbolLogo), ctx, symbol)
}

// DirectSymbolLogo mocks base method.
func (m *MockLogosService) DirectSymbolLogo(ctx context.Context, symbol string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DirectSymbolLogo", ctx, symbol)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DirectSymbolLogo indicates an expected call of DirectSymbolLogo.
func (mr *MockLogosServiceMockRecorder) DirectSymbolLogo(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirectSymbolLogo", reflect.TypeOf((*MockLogosService)(nil).DirectSymbolLogo), ctx, symbol)
}

// MultiSymbolLogos mocks base method.
func (m *MockLogosService) MultiSymbolLogos(ctx context.Context, req model.MultipleSymbolLogosRequest) ([]model.SymbolLogosResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiSymbolLogos", ctx, req)
	ret0, _ := ret[0].([]model.SymbolLogosResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiSymbolLogos indicates an expected call of MultiSymbolLogos.
func (mr *MockLogosServiceMockRecorder) MultiSymbolLogos(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiSymbolLogos", reflect.TypeOf((*MockLogosService)(nil).MultiSymbolLogos), ctx, req)
}

// MultipleCryptoSymbolLogo mocks base method.
func (m *MockLogosService) MultipleCryptoSymbolLogo(ctx context.Context, req model.MultipleCryptoLogosRequest) ([]model.SymbolLogosResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipleCryptoSymbolLogo", ctx, req)
	ret0, _ := ret[0].([]model.SymbolLogosResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultipleCryptoSymbolLogo indicates an expected call of MultipleCryptoSymbolLogo.
func (mr *MockLogosServiceMockRecorder) MultipleCryptoSymbolLogo(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipleCryptoSymbolLogo", reflect.TypeOf((*MockLogosService)(nil).MultipleCryptoSymbolLogo), ctx, req)
}

// SocialSymbolLogos mocks base method.
func (m *MockLogosService) SocialSymbolLogos(ctx context.Context, symbol string) (model.SymbolSocialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SocialSymbolLogos", ctx, symbol)
	ret0, _ := ret[0].(model.SymbolSocialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SocialSymbolLogos indicates an expected call of SocialSymbolLogos.
func (mr *MockLogosServiceMockRecorder) SocialSymbolLogos(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SocialSymbolLogos", reflect.TypeOf((*MockLogosService)(nil).SocialSymbolLogos), ctx, symbol)
}

// SymbolLogos mocks base method.
func (m *MockLogosService) SymbolLogos(ctx context.Context, symbol string) (model.SymbolLogosResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SymbolLogos", ctx, symbol)
	ret0, _ := ret[0].(model.SymbolLogosResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SymbolLogos indicates an expected call of SymbolLogos.
func (mr *MockLogosServiceMockRecorder) SymbolLogos(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SymbolLogos", reflect.TypeOf((*MockLogosService)(nil).SymbolLogos), ctx, symbol)
}

// MockPassportService is a mock of PassportService interface.
type MockPassportService struct {
	ctrl     *gomock.Controller
	recorder *MockPassportServiceMockRecorder
}

// MockPassportServiceMockRecorder is the mock recorder for MockPassportService.
type MockPassportServiceMockRecorder struct {
	mock *MockPassportService
}

// NewMockPassportService creates a new mock instance.
func NewMockPassportService(ctrl *gomock.Controller) *MockPassportService {
	mock := &MockPassportService{ctrl: ctrl}
	mock.recorder = &MockPassportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPassportService) EXPECT() *MockPassportServiceMockRecorder {
	return m.recorder
}

// ArticleByID mocks base method.
func (m *MockPassportService) ArticleByID(ctx context.Context, req model.ArticleByIDRequest) (model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArticleByID", ctx, req)
	ret0, _ := ret[0].(model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArticleByID indicates an expected call of ArticleByID.
func (mr *MockPassportServiceMockRecorder) ArticleByID(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArticleByID", reflect.TypeOf((*MockPassportService)(nil).ArticleByID), ctx, req)
}

// Articles mocks base method.
func (m *MockPassportService) Articles(ctx context.Context, req model.ArticlesRequest) ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Articles", ctx, req)
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Articles indicates an expected call of Articles.
func (mr *MockPassportServiceMockRecorder) Articles(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Articles", reflect.TypeOf((*MockPassportService)(nil).Articles), ctx, req)
}

// AuthorProfile mocks base method.
func (m *MockPassportService) AuthorProfile(ctx context.Context, req model.AuthorProfileRequest) ([]model.AuthorProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorProfile", ctx, req)
	ret0, _ := ret[0].([]model.AuthorProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorProfile indicates an expected call of AuthorProfile.
func (mr *MockPassportServiceMockRecorder) AuthorProfile(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorProfile", reflect.TypeOf((*MockPassportService)(nil).AuthorProfile), ctx, req)
}

// MostPopularTags mocks base method.
func (m *MockPassportService) MostPopularTags(ctx context.Context, req model.MostPopularTagsRequest) ([]model.TagShortInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MostPopularTags", ctx, req)
	ret0, _ := ret[0].([]model.TagShortInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MostPopularTags indicates an expected call of MostPopularTags.
func (mr *MockPassportServiceMockRecorder) MostPopularTags(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MostPopularTags", reflect.TypeOf((*MockPassportService)(nil).MostPopularTags), ctx, req)
}

// Newsfeed mocks base method.
func (m *MockPassportService) Newsfeed(ctx context.Context, req model.NewsfeedRequest) ([]model.Newsfeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Newsfeed", ctx, req)
	ret0, _ := ret[0].([]model.Newsfeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Newsfeed indicates an expected call of Newsfeed.
func (mr *MockPassportServiceMockRecorder) Newsfeed(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Newsfeed", reflect.TypeOf((*MockPassportService)(nil).Newsfeed), ctx, req)
}

// SearchArticle mocks base method.
func (m *MockPassportService) SearchArticle(ctx context.Context, req model.SearchArticleRequest) ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchArticle", ctx, req)
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchArticle indicates an expected call of SearchArticle.
func (mr *MockPassportServiceMockRecorder) SearchArticle(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchArticle", reflect.TypeOf((*MockPassportService)(nil).SearchArticle), ctx, req)
}

// MockTipRankService is a mock of TipRankService interface.
type MockTipRankService struct {
	ctrl     *gomock.Controller
	recorder *MockTipRankServiceMockRecorder
}

// MockTipRankServiceMockRecorder is the mock recorder for MockTipRankService.
type MockTipRankServiceMockRecorder struct {
	mock *MockTipRankService
}

// NewMockTipRankService creates a new mock instance.
func NewMockTipRankService(ctrl *gomock.Controller) *MockTipRankService {
	mock := &MockTipRankService{ctrl: ctrl}
	mock.recorder = &MockTipRankServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTipRankService) EXPECT() *MockTipRankServiceMockRecorder {
	return m.recorder
}

// AnalystConsensus mocks base method.
func (m *MockTipRankService) AnalystConsensus(ctx context.Context, req model.AnalystConsensusRequest) ([]model.AnalystConsensusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalystConsensus", ctx, req)
	ret0, _ := ret[0].([]model.AnalystConsensusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalystConsensus indicates an expected call of AnalystConsensus.
func (mr *MockTipRankServiceMockRecorder) AnalystConsensus(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalystConsensus", reflect.TypeOf((*MockTipRankService)(nil).AnalystConsensus), ctx, req)
}

// AnalystPortfolios mocks base method.
func (m *MockTipRankService) AnalystPortfolios(ctx context.Context, req model.PortfoliosRequest) ([]model.PortfoliosResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalystPortfolios", ctx, req)
	ret0, _ := ret[0].([]model.PortfoliosResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalystPortfolios indicates an expected call of AnalystPortfolios.
func (mr *MockTipRankServiceMockRecorder) AnalystPortfolios(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalystPortfolios", reflect.TypeOf((*MockTipRankService)(nil).AnalystPortfolios), ctx, req)
}

// AnalystProfile mocks base method.
func (m *MockTipRankService) AnalystProfile(ctx context.Context, id string) (model.AnalystProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalystProfile", ctx, id)
	ret0, _ := ret[0].(model.AnalystProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalystProfile indicates an expected call of AnalystProfile.
func (mr *MockTipRankServiceMockRecorder) AnalystProfile(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalystProfile", reflect.TypeOf((*MockTipRankService)(nil).AnalystProfile), ctx, id)
}

// AnalystsExpertPictureStore mocks base method.
func (m *MockTipRankService) AnalystsExpertPictureStore(ctx context.Context) (model.AnalystsExpertPictureStoreResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalystsExpertPictureStore", ctx)
	ret0, _ := ret[0].(model.AnalystsExpertPictureStoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalystsExpertPictureStore indicates an expected call of AnalystsExpertPictureStore.
func (mr *MockTipRankServiceMockRecorder) AnalystsExpertPictureStore(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalystsExpertPictureStore", reflect.TypeOf((*MockTipRankService)(nil).AnalystsExpertPictureStore), ctx)
}

// BestPerformingExperts mocks base method.
func (m *MockTipRankService) BestPerformingExperts(ctx context.Context, num int) ([]model.BestPerformingExpertsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BestPerformingExperts", ctx, num)
	ret0, _ := ret[0].([]model.BestPerformingExpertsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BestPerformingExperts indicates an expected call of BestPerformingExperts.
func (mr *MockTipRankServiceMockRecorder) BestPerformingExperts(ctx, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BestPerformingExperts", reflect.TypeOf((*MockTipRankService)(nil).BestPerformingExperts), ctx, num)
}

// GeneralStockUpdates mocks base method.
func (m *MockTipRankService) GeneralStockUpdates(ctx context.Context, utcTime, details string) (model.GeneralStockUpdatesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneralStockUpdates", ctx, utcTime, details)
	ret0, _ := ret[0].(model.GeneralStockUpdatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneralStockUpdates indicates an expected call of GeneralStockUpdates.
func (mr *MockTipRankServiceMockRecorder) GeneralStockUpdates(ctx, utcTime, details interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneralStockUpdates", reflect.TypeOf((*MockTipRankService)(nil).GeneralStockUpdates), ctx, utcTime, details)
}

// HedgeFundsBestPerformingExperts mocks base method.
func (m *MockTipRankService) HedgeFundsBestPerformingExperts(ctx context.Context, num int) ([]model.HedgeFundsBestPerformingExpertsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HedgeFundsBestPerformingExperts", ctx, num)
	ret0, _ := ret[0].([]model.HedgeFundsBestPerformingExpertsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HedgeFundsBestPerformingExperts indicates an expected call of HedgeFundsBestPerformingExperts.
func (mr *MockTipRankServiceMockRecorder) HedgeFundsBestPerformingExperts(ctx, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HedgeFundsBestPerformingExperts", reflect.TypeOf((*MockTipRankService)(nil).HedgeFundsBestPerformingExperts), ctx, num)
}

// InsidersBestPerformingExperts mocks base method.
func (m *MockTipRankService) InsidersBestPerformingExperts(ctx context.Context, num int) ([]model.InsidersBestPerformingExpertsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsidersBestPerformingExperts", ctx, num)
	ret0, _ := ret[0].([]model.InsidersBestPerformingExpertsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsidersBestPerformingExperts indicates an expected call of InsidersBestPerformingExperts.
func (mr *MockTipRankServiceMockRecorder) InsidersBestPerformingExperts(ctx, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsidersBestPerformingExperts", reflect.TypeOf((*MockTipRankService)(nil).InsidersBestPerformingExperts), ctx, num)
}

// InsidersLiveFeed mocks base method.
func (m *MockTipRankService) InsidersLiveFeed(ctx context.Context, num int, sort string) ([]model.InsidersLiveFeedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsidersLiveFeed", ctx, num, sort)
	ret0, _ := ret[0].([]model.InsidersLiveFeedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsidersLiveFeed indicates an expected call of InsidersLiveFeed.
func (mr *MockTipRankServiceMockRecorder) InsidersLiveFeed(ctx, num, sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsidersLiveFeed", reflect.TypeOf((*MockTipRankService)(nil).InsidersLiveFeed), ctx, num, sort)
}

// InsidersOverview mocks base method.
func (m *MockTipRankService) InsidersOverview(ctx context.Context, expertUID string) (model.InsidersOverviewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsidersOverview", ctx, expertUID)
	ret0, _ := ret[0].(model.InsidersOverviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsidersOverview indicates an expected call of InsidersOverview.
func (mr *MockTipRankServiceMockRecorder) InsidersOverview(ctx, expertUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsidersOverview", reflect.TypeOf((*MockTipRankService)(nil).InsidersOverview), ctx, expertUID)
}

// LatestAnalystRatingsOnStock mocks base method.
func (m *MockTipRankService) LatestAnalystRatingsOnStock(ctx context.Context, req model.LatestAnalystRatingsOnStockRequest) ([]model.LatestAnalystRatingsOnStockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestAnalystRatingsOnStock", ctx, req)
	ret0, _ := ret[0].([]model.LatestAnalystRatingsOnStockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestAnalystRatingsOnStock indicates an expected call of LatestAnalystRatingsOnStock.
func (mr *MockTipRankServiceMockRecorder) LatestAnalystRatingsOnStock(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestAnalystRatingsOnStock", reflect.TypeOf((*MockTipRankService)(nil).LatestAnalystRatingsOnStock), ctx, req)
}

// LiveFeed mocks base method.
func (m *MockTipRankService) LiveFeed(ctx context.Context, req model.LiveFeedRequest) ([]model.LiveFeedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LiveFeed", ctx, req)
	ret0, _ := ret[0].([]model.LiveFeedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LiveFeed indicates an expected call of LiveFeed.
func (mr *MockTipRankServiceMockRecorder) LiveFeed(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LiveFeed", reflect.TypeOf((*MockTipRankService)(nil).LiveFeed), ctx, req)
}

// SectorConsensus mocks base method.
func (m *MockTipRankService) SectorConsensus(ctx context.Context) (model.SectorConsensusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SectorConsensus", ctx)
	ret0, _ := ret[0].(model.SectorConsensusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SectorConsensus indicates an expected call of SectorConsensus.
func (mr *MockTipRankServiceMockRecorder) SectorConsensus(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SectorConsensus", reflect.TypeOf((*MockTipRankService)(nil).SectorConsensus), ctx)
}

// StocksSimilarStocks mocks base method.
func (m *MockTipRankService) StocksSimilarStocks(ctx context.Context, ticker string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StocksSimilarStocks", ctx, ticker)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StocksSimilarStocks indicates an expected call of StocksSimilarStocks.
func (mr *MockTipRankServiceMockRecorder) StocksSimilarStocks(ctx, ticker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StocksSimilarStocks", reflect.TypeOf((*MockTipRankService)(nil).StocksSimilarStocks), ctx, ticker)
}

// SupportedTickers mocks base method.
func (m *MockTipRankService) SupportedTickers(ctx context.Context) (model.SupportedTickersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedTickers", ctx)
	ret0, _ := ret[0].(model.SupportedTickersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportedTickers indicates an expected call of SupportedTickers.
func (mr *MockTipRankServiceMockRecorder) SupportedTickers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedTickers", reflect.TypeOf((*MockTipRankService)(nil).SupportedTickers), ctx)
}

// TrendingStocks mocks base method.
func (m *MockTipRankService) TrendingStocks(ctx context.Context, req model.TrendingStocksRequest) ([]model.TrendingStocksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrendingStocks", ctx, req)
	ret0, _ := ret[0].([]model.TrendingStocksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrendingStocks indicates an expected call of TrendingStocks.
func (mr *MockTipRankServiceMockRecorder) TrendingStocks(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrendingStocks", reflect.TypeOf((*MockTipRankService)(nil).TrendingStocks), ctx, req)
}

// MockQuoteService is a mock of QuoteService interface.
type MockQuoteService struct {
	ctrl     *gomock.Controller
	recorder *MockQuoteServiceMockRecorder
}

// MockQuoteServiceMockRecorder is the mock recorder for MockQuoteService.
type MockQuoteServiceMockRecorder struct {
	mock *MockQuoteService
}

// NewMockQuoteService creates a new mock instance.
func NewMockQuoteService(ctrl *gomock.Controller) *MockQuoteService {
	mock := &MockQuoteService{ctrl: ctrl}
	mock.recorder = &MockQuoteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuoteService) EXPECT() *MockQuoteServiceMockRecorder {
	return m.recorder
}

// GetIntradayQuotes mocks base method.
func (m *MockQuoteService) GetIntradayQuotes(ctx context.Context, req model.IntradayRequest) ([]model.IntradayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntradayQuotes", ctx, req)
	ret0, _ := ret[0].([]model.IntradayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntradayQuotes indicates an expected call of GetIntradayQuotes.
func (mr *MockQuoteServiceMockRecorder) GetIntradayQuotes(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntradayQuotes", reflect.TypeOf((*MockQuoteService)(nil).GetIntradayQuotes), ctx, req)
}

// GetQuoteHistory mocks base method.
func (m *MockQuoteService) GetQuoteHistory(ctx context.Context, req model.QuoteHistoryRequest) (model.QuoteHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuoteHistory", ctx, req)
	ret0, _ := ret[0].(model.QuoteHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuoteHistory indicates an expected call of GetQuoteHistory.
func (mr *MockQuoteServiceMockRecorder) GetQuoteHistory(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuoteHistory", reflect.TypeOf((*MockQuoteService)(nil).GetQuoteHistory), ctx, req)
}

// GetQuotesEquityData mocks base method.
func (m *MockQuoteService) GetQuotesEquityData(ctx context.Context, symbols, quoteType string) ([]model.QuoteEquityDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotesEquityData", ctx, symbols, quoteType)
	ret0, _ := ret[0].([]model.QuoteEquityDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotesEquityData indicates an expected call of GetQuotesEquityData.
func (mr *MockQuoteServiceMockRecorder) GetQuotesEquityData(ctx, symbols, quoteType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotesEquityData", reflect.TypeOf((*MockQuoteService)(nil).GetQuotesEquityData), ctx, symbols, quoteType)
}

// MockFundsService is a mock of FundsService interface.
type MockFundsService struct {
	ctrl     *gomock.Controller
	recorder *MockFundsServiceMockRecorder
}

// MockFundsServiceMockRecorder is the mock recorder for MockFundsService.
type MockFundsServiceMockRecorder struct {
	mock *MockFundsService
}

// NewMockFundsService creates a new mock instance.
func NewMockFundsService(ctrl *gomock.Controller) *MockFundsService {
	mock := &MockFundsService{ctrl: ctrl}
	mock.recorder = &MockFundsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFundsService) EXPECT() *MockFundsServiceMockRecorder {
	return m.recorder
}

// GetFundDetails mocks base method.
func (m *MockFundsService) GetFundDetails(ctx context.Context, symbol string) (model.GetFundDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFundDetails", ctx, symbol)
	ret0, _ := ret[0].(model.GetFundDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFundDetails indicates an expected call of GetFundDetails.
func (mr *MockFundsServiceMockRecorder) GetFundDetails(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFundDetails", reflect.TypeOf((*MockFundsService)(nil).GetFundDetails), ctx, symbol)
}

// GetFundScreenerFilters mocks base method.
func (m *MockFundsService) GetFundScreenerFilters(ctx context.Context) (model.GetFundScreenerFiltersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFundScreenerFilters", ctx)
	ret0, _ := ret[0].(model.GetFundScreenerFiltersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFundScreenerFilters indicates an expected call of GetFundScreenerFilters.
func (mr *MockFundsServiceMockRecorder) GetFundScreenerFilters(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFundScreenerFilters", reflect.TypeOf((*MockFundsService)(nil).GetFundScreenerFilters), ctx)
}

// GetTopFunds mocks base method.
func (m *MockFundsService) GetTopFunds(ctx context.Context, req model.GetTopFundsRequest) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopFunds", ctx, req)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopFunds indicates an expected call of GetTopFunds.
func (mr *MockFundsServiceMockRecorder) GetTopFunds(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopFunds", reflect.TypeOf((*MockFundsService)(nil).GetTopFunds), ctx, req)
}

// ScreenFunds mocks base method.
func (m *MockFundsService) ScreenFunds(ctx context.Context, req model.FundScreenerRequest) (model.FundScreenerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScreenFunds", ctx, req)
	ret0, _ := ret[0].(model.FundScreenerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScreenFunds indicates an expected call of ScreenFunds.
func (mr *MockFundsServiceMockRecorder) ScreenFunds(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScreenFunds", reflect.TypeOf((*MockFundsService)(nil).ScreenFunds), ctx, req)
}

// ScreenSectorFunds mocks base method.
func (m *MockFundsService) ScreenSectorFunds(ctx context.Context, req model.FundSectorScreenerRequest) (model.FundScreenerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScreenSectorFunds", ctx, req)
	ret0, _ := ret[0].(model.FundScreenerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScreenSectorFunds indicates an expected call of ScreenSectorFunds.
func (mr *MockFundsServiceMockRecorder) ScreenSectorFunds(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScreenSectorFunds", reflect.TypeOf((*MockFundsService)(nil).ScreenSectorFunds), ctx, req)
}

// MockResearchService is a mock of ResearchService interface.
type MockResearchService struct {
	ctrl     *gomock.Controller
	recorder *MockResearchServiceMockRecorder
}

// MockResearchServiceMockRecorder is the mock recorder for MockResearchService.
type MockResearchServiceMockRecorder struct {
	mock *MockResearchService
}

// NewMockResearchService creates a new mock instance.
func NewMockResearchService(ctrl *gomock.Controller) *MockResearchService {
	mock := &MockResearchService{ctrl: ctrl}
	mock.recorder = &MockResearchServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResearchService) EXPECT() *MockResearchServiceMockRecorder {
	return m.recorder
}

// GetCombinedProfile mocks base method.
func (m *MockResearchService) GetCombinedProfile(ctx context.Context, symbol string) (model.CompanyProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCombinedProfile", ctx, symbol)
	ret0, _ := ret[0].(model.CompanyProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCombinedProfile indicates an expected call of GetCombinedProfile.
func (mr *MockResearchServiceMockRecorder) GetCombinedProfile(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCombinedProfile", reflect.TypeOf((*MockResearchService)(nil).GetCombinedProfile), ctx, symbol)
}

// GetCompanyProfile mocks base method.
func (m *MockResearchService) GetCompanyProfile(ctx context.Context, symbol string) (model.CompanyProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyProfile", ctx, symbol)
	ret0, _ := ret[0].(model.CompanyProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyProfile indicates an expected call of GetCompanyProfile.
func (mr *MockResearchServiceMockRecorder) GetCompanyProfile(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyProfile", reflect.TypeOf((*MockResearchService)(nil).GetCompanyProfile), ctx, symbol)
}

// GetEarningReleases mocks base method.
func (m *MockResearchService) GetEarningReleases(ctx context.Context, req model.EarningReleasesRequest) (model.EarningReleasesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEarningReleases", ctx, req)
	ret0, _ := ret[0].(model.EarningReleasesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEarningReleases indicates an expected call of GetEarningReleases.
func (mr *MockResearchServiceMockRecorder) GetEarningReleases(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEarningReleases", reflect.TypeOf((*MockResearchService)(nil).GetEarningReleases), ctx, req)
}

// GetIndustriesPerformance mocks base method.
func (m *MockResearchService) GetIndustriesPerformance(ctx context.Context, req model.GetIndustriesPerformanceRequest) (model.GetIndustriesPerformanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndustriesPerformance", ctx, req)
	ret0, _ := ret[0].(model.GetIndustriesPerformanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndustriesPerformance indicates an expected call of GetIndustriesPerformance.
func (mr *MockResearchServiceMockRecorder) GetIndustriesPerformance(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndustriesPerformance", reflect.TypeOf((*MockResearchService)(nil).GetIndustriesPerformance), ctx, req)
}

// GetMomentumRatioGraph mocks base method.
func (m *MockResearchService) GetMomentumRatioGraph(ctx context.Context, req model.MomentumRatioGraphRequest) (model.MomentumRatioGraphResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMomentumRatioGraph", ctx, req)
	ret0, _ := ret[0].(model.MomentumRatioGraphResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMomentumRatioGraph indicates an expected call of GetMomentumRatioGraph.
func (mr *MockResearchServiceMockRecorder) GetMomentumRatioGraph(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMomentumRatioGraph", reflect.TypeOf((*MockResearchService)(nil).GetMomentumRatioGraph), ctx, req)
}

// GetOwnershipsByID mocks base method.
func (m *MockResearchService) GetOwnershipsByID(ctx context.Context, req model.GetOwnershipsByIDRequest) (model.GetOwnershipsBySymbolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnershipsByID", ctx, req)
	ret0, _ := ret[0].(model.GetOwnershipsBySymbolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnershipsByID indicates an expected call of GetOwnershipsByID.
func (mr *MockResearchServiceMockRecorder) GetOwnershipsByID(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnershipsByID", reflect.TypeOf((*MockResearchService)(nil).GetOwnershipsByID), ctx, req)
}

// GetOwnershipsBySymbol mocks base method.
func (m *MockResearchService) GetOwnershipsBySymbol(ctx context.Context, req model.GetOwnershipsBySymbolRequest) (model.GetOwnershipsBySymbolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnershipsBySymbol", ctx, req)
	ret0, _ := ret[0].(model.GetOwnershipsBySymbolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnershipsBySymbol indicates an expected call of GetOwnershipsBySymbol.
func (mr *MockResearchServiceMockRecorder) GetOwnershipsBySymbol(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnershipsBySymbol", reflect.TypeOf((*MockResearchService)(nil).GetOwnershipsBySymbol), ctx, req)
}

// GetSeasonality mocks base method.
func (m *MockResearchService) GetSeasonality(ctx context.Context, req model.SeasonalityRequest) (model.SeasonalityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeasonality", ctx, req)
	ret0, _ := ret[0].(model.SeasonalityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeasonality indicates an expected call of GetSeasonality.
func (mr *MockResearchServiceMockRecorder) GetSeasonality(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeasonality", reflect.TypeOf((*MockResearchService)(nil).GetSeasonality), ctx, req)
}

// GetSymbolFundamentals mocks base method.
func (m *MockResearchService) GetSymbolFundamentals(ctx context.Context, req model.EarningReleasesRequest) (model.GetSymbolFundamentalsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSymbolFundamentals", ctx, req)
	ret0, _ := ret[0].(model.GetSymbolFundamentalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSymbolFundamentals indicates an expected call of GetSymbolFundamentals.
func (mr *MockResearchServiceMockRecorder) GetSymbolFundamentals(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSymbolFundamentals", reflect.TypeOf((*MockResearchService)(nil).GetSymbolFundamentals), ctx, req)
}

// Screener mocks base method.
func (m *MockResearchService) Screener(ctx context.Context, req model.StockScreenerRequest) (model.StockScreenerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Screener", ctx, req)
	ret0, _ := ret[0].(model.StockScreenerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Screener indicates an expected call of Screener.
func (mr *MockResearchServiceMockRecorder) Screener(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Screener", reflect.TypeOf((*MockResearchService)(nil).Screener), ctx, req)
}

// StockMarketHeatmap mocks base method.
func (m *MockResearchService) StockMarketHeatmap(ctx context.Context, heatmapName, quoteType string) (model.StockMarketHeatmapResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StockMarketHeatmap", ctx, heatmapName, quoteType)
	ret0, _ := ret[0].(model.StockMarketHeatmapResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StockMarketHeatmap indicates an expected call of StockMarketHeatmap.
func (mr *MockResearchServiceMockRecorder) StockMarketHeatmap(ctx, heatmapName, quoteType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StockMarketHeatmap", reflect.TypeOf((*MockResearchService)(nil).StockMarketHeatmap), ctx, heatmapName, quoteType)
}

// MockIPOService is a mock of IPOService interface.
type MockIPOService struct {
	ctrl     *gomock.Controller
	recorder *MockIPOServiceMockRecorder
}

// MockIPOServiceMockRecorder is the mock recorder for MockIPOService.
type MockIPOServiceMockRecorder struct {
	mock *MockIPOService
}

// NewMockIPOService creates a new mock instance.
func NewMockIPOService(ctrl *gomock.Controller) *MockIPOService {
	mock := &MockIPOService{ctrl: ctrl}
	mock.recorder = &MockIPOServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPOService) EXPECT() *MockIPOServiceMockRecorder {
	return m.recorder
}

// GetRecentIPOs mocks base method.
func (m *MockIPOService) GetRecentIPOs(ctx context.Context, req model.RecentIPORequest) (model.IPOResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentIPOs", ctx, req)
	ret0, _ := ret[0].(model.IPOResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentIPOs indicates an expected call of GetRecentIPOs.
func (mr *MockIPOServiceMockRecorder) GetRecentIPOs(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentIPOs", reflect.TypeOf((*MockIPOService)(nil).GetRecentIPOs), ctx, req)
}

// GetUpcomingIPOs mocks base method.
func (m *MockIPOService) GetUpcomingIPOs(ctx context.Context, limit, offset int) (model.IPOResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpcomingIPOs", ctx, limit, offset)
	ret0, _ := ret[0].(model.IPOResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpcomingIPOs indicates an expected call of GetUpcomingIPOs.
func (mr *MockIPOServiceMockRecorder) GetUpcomingIPOs(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpcomingIPOs", reflect.TypeOf((*MockIPOService)(nil).GetUpcomingIPOs), ctx, limit, offset)
}

// MockWorldMarketService is a mock of WorldMarketService interface.
type MockWorldMarketService struct {
	ctrl     *gomock.Controller
	recorder *MockWorldMarketServiceMockRecorder
}

// MockWorldMarketServiceMockRecorder is the mock recorder for MockWorldMarketService.
type MockWorldMarketServiceMockRecorder struct {
	mock *MockWorldMarketService
}

// NewMockWorldMarketService creates a new mock instance.
func NewMockWorldMarketService(ctrl *gomock.Controller) *MockWorldMarketService {
	mock := &MockWorldMarketService{ctrl: ctrl}
	mock.recorder = &MockWorldMarketServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorldMarketService) EXPECT() *MockWorldMarketServiceMockRecorder {
	return m.recorder
}

// GetContinents mocks base method.
func (m *MockWorldMarketService) GetContinents(ctx context.Context, limit, offset int) ([]model.Continent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContinents", ctx, limit, offset)
	ret0, _ := ret[0].([]model.Continent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContinents indicates an expected call of GetContinents.
func (mr *MockWorldMarketServiceMockRecorder) GetContinents(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContinents", reflect.TypeOf((*MockWorldMarketService)(nil).GetContinents), ctx, limit, offset)
}

// GetCountryCodes mocks base method.
func (m *MockWorldMarketService) GetCountryCodes(ctx context.Context, limit, offset int) ([]model.CountryCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountryCodes", ctx, limit, offset)
	ret0, _ := ret[0].([]model.CountryCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountryCodes indicates an expected call of GetCountryCodes.
func (mr *MockWorldMarketServiceMockRecorder) GetCountryCodes(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountryCodes", reflect.TypeOf((*MockWorldMarketService)(nil).GetCountryCodes), ctx, limit, offset)
}

// GetGlobalIndexes mocks base method.
func (m *MockWorldMarketService) GetGlobalIndexes(ctx context.Context, limit, offset int, continent, quoteType string) ([]model.GlobalIndexFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalIndexes", ctx, limit, offset, continent, quoteType)
	ret0, _ := ret[0].([]model.GlobalIndexFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalIndexes indicates an expected call of GetGlobalIndexes.
func (mr *MockWorldMarketServiceMockRecorder) GetGlobalIndexes(ctx, limit, offset, continent, quoteType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalIndexes", reflect.TypeOf((*MockWorldMarketService)(nil).GetGlobalIndexes), ctx, limit, offset, continent, quoteType)
}

// GetRegions mocks base method.
func (m *MockWorldMarketService) GetRegions(ctx context.Context, limit, offset int) ([]model.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegions", ctx, limit, offset)
	ret0, _ := ret[0].([]model.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegions indicates an expected call of GetRegions.
func (mr *MockWorldMarketServiceMockRecorder) GetRegions(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegions", reflect.TypeOf((*MockWorldMarketService)(nil).GetRegions), ctx, limit, offset)
}

// MockMarketDatesService is a mock of MarketDatesService interface.
type MockMarketDatesService struct {
	ctrl     *gomock.Controller
	recorder *MockMarketDatesServiceMockRecorder
}

// MockMarketDatesServiceMockRecorder is the mock recorder for MockMarketDatesService.
type MockMarketDatesServiceMockRecorder struct {
	mock *MockMarketDatesService
}

// NewMockMarketDatesService creates a new mock instance.
func NewMockMarketDatesService(ctrl *gomock.Controller) *MockMarketDatesService {
	mock := &MockMarketDatesService{ctrl: ctrl}
	mock.recorder = &MockMarketDatesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketDatesService) EXPECT() *MockMarketDatesServiceMockRecorder {
	return m.recorder
}

// GetMarketDatesHistory mocks base method.
func (m *MockMarketDatesService) GetMarketDatesHistory(ctx context.Context, req model.GetMarketDatesRequest) (model.GetMarketDatesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarketDatesHistory", ctx, req)
	ret0, _ := ret[0].(model.GetMarketDatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarketDatesHistory indicates an expected call of GetMarketDatesHistory.
func (mr *MockMarketDatesServiceMockRecorder) GetMarketDatesHistory(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketDatesHistory", reflect.TypeOf((*MockMarketDatesService)(nil).GetMarketDatesHistory), ctx, req)
}

// GetTodayMarketHours mocks base method.
func (m *MockMarketDatesService) GetTodayMarketHours(ctx context.Context, market string) (model.GetMarketHoursResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodayMarketHours", ctx, market)
	ret0, _ := ret[0].(model.GetMarketHoursResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodayMarketHours indicates an expected call of GetTodayMarketHours.
func (mr *MockMarketDatesServiceMockRecorder) GetTodayMarketHours(ctx, market interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodayMarketHours", reflect.TypeOf((*MockMarketDatesService)(nil).GetTodayMarketHours), ctx, market)
}

// MockOptionGreeksService is a mock of OptionGreeksService interface.
type MockOptionGreeksService struct {
	ctrl     *gomock.Controller
	recorder *MockOptionGreeksServiceMockRecorder
}

// MockOptionGreeksServiceMockRecorder is the mock recorder for MockOptionGreeksService.
type MockOptionGreeksServiceMockRecorder struct {
	mock *MockOptionGreeksService
}

// NewMockOptionGreeksService creates a new mock instance.
func NewMockOptionGreeksService(ctrl *gomock.Controller) *MockOptionGreeksService {
	mock := &MockOptionGreeksService{ctrl: ctrl}
	mock.recorder = &MockOptionGreeksServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOptionGreeksService) EXPECT() *MockOptionGreeksServiceMockRecorder {
	return m.recorder
}

// CalculateMatrix mocks base method.
func (m *MockOptionGreeksService) CalculateMatrix(ctx context.Context, req model.CalculateParamsRequest) (model.CalculateMatrixParamsRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateMatrix", ctx, req)
	ret0, _ := ret[0].(model.CalculateMatrixParamsRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateMatrix indicates an expected call of CalculateMatrix.
func (mr *MockOptionGreeksServiceMockRecorder) CalculateMatrix(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateMatrix", reflect.TypeOf((*MockOptionGreeksService)(nil).CalculateMatrix), ctx, req)
}

// CalculateParams mocks base method.
func (m *MockOptionGreeksService) CalculateParams(ctx context.Context, req model.CalculateParamsRequest) (model.CalculateParamsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateParams", ctx, req)
	ret0, _ := ret[0].(model.CalculateParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateParams indicates an expected call of CalculateParams.
func (mr *MockOptionGreeksServiceMockRecorder) CalculateParams(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateParams", reflect.TypeOf((*MockOptionGreeksService)(nil).CalculateParams), ctx, req)
}

// MockWS is a mock of WS interface.
type MockWS struct {
	ctrl     *gomock.Controller
	recorder *MockWSMockRecorder
}

// MockWSMockRecorder is the mock recorder for MockWS.
type MockWSMockRecorder struct {
	mock *MockWS
}

// NewMockWS creates a new mock instance.
func NewMockWS(ctrl *gomock.Controller) *MockWS {
	mock := &MockWS{ctrl: ctrl}
	mock.recorder = &MockWSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWS) EXPECT() *MockWSMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockWS) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWSMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWS)(nil).Close))
}

// Subscribe mocks base method.
func (m *MockWS) Subscribe(ctx context.Context, subscriptionType model.SubscriptionType) (chan model.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, subscriptionType)
	ret0, _ := ret[0].(chan model.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockWSMockRecorder) Subscribe(ctx, subscriptionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockWS)(nil).Subscribe), ctx, subscriptionType)
}
